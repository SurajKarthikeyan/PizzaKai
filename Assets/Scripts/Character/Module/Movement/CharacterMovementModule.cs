using NaughtyAttributes;
using UnityEngine;

/// <summary>
/// Performs the movement of characters. Another script is required to actually
/// call the functions.
///
/// <br/>
///
/// Authors: Ryan Chang (2023)
/// </summary>
public class CharacterMovementModule : Module
{
    #region Variables
    #region User Settings
    [InfoBox("NOTE: maxMoveSpeed.y is NOT the max jump speed! Jumping is " +
        "controlled by jumpForce.")]
    [Tooltip("The maximum move speed for this character in both horizontal " +
        "and vertical directions.")]
    public Vector2 maxMoveSpeed = new(10f, 0);

    [InfoBox("NOTE: moveAcceleration.y is NOT the jump force! Jumping is " +
        "controlled by jumpForce.")]
    [Tooltip("The move acceleration for this character in both horizontal " +
        "and vertical directions.")]
    public Vector2 moveAcceleration = new(1f, 0);

    [Tooltip("The upward force produced by jumping.")]
    public float jumpForce = 12f;

    public Duration jumpCooldown = new(0.5f);

    [Tooltip("The collider responsible for checking if the character is " +
        "grounded.")]
    public Collider2D groundCheck;
    #endregion

    #region Autogenerated
    [Tooltip("The inputted movement of this character. The x component " +
        "controls the horizontal movement and the vertical component " +
        "controls the vertical movement. All components are clamped " +
        "between -1 and 1.")]
    [ReadOnly]
    public Vector2 inputtedMovement;

    [Tooltip("If true, the input to jump has been pressed.")]
    [ReadOnly]
    public bool inputtedJump;

    private Collider2D[] touchingGroundColliders = new Collider2D[1];

    private ContactFilter2D groundCheckCF2D;
    #endregion
    #endregion

    #region Parameters
    /// <summary>
    /// True if the character's <see cref="groundCheck"/> is touching at least
    /// one collider with a layer contained in the layermask <see
    /// cref="GameManager.canJumpLayers"/>.
    /// </summary>
    public bool TouchingGround => groundCheck.OverlapCollider(
        groundCheckCF2D, touchingGroundColliders
    ) > 0;
    #endregion

    #region Methods
    #region Instantiation
    private void Start()
    {
        // Make sure max speed is positive.
        maxMoveSpeed = maxMoveSpeed.Abs();

        // Set the contact filter for the grounded check.
        groundCheckCF2D = new()
        {
            layerMask = GameManager.Instance.canJumpLayers,
            useLayerMask = true
        };
    }
    #endregion

    #region Main Loop
    private void FixedUpdate()
    {
        // Here we move the character. First get the speed the character is
        // moving at and compare it to the maximal speed.
        Vector2 speed = Master.r2d.velocity;

        // Used to make the comparison.
        Vector2 compare = new(
            inputtedMovement.x.Sign() * speed.x,
            inputtedMovement.y.Sign() * speed.y
        );

        Vector2 force = new();

        if (inputtedMovement.x.Approx(0) && !speed.x.Approx(0))
        {
            // Apply a backwards force to stop the player.
            force.x = -speed.x * Mathf.Clamp01(moveAcceleration.x);
        }
        else if (compare.x < maxMoveSpeed.x)
        {
            // The horizontal speed is less than the max horizontal speed. Allow
            // character to move.
            force.x = inputtedMovement.x * moveAcceleration.x;
        }
        if (inputtedMovement.y.Approx(0) && !speed.y.Approx(0))
        {
            // Ditto.
            force.y = -speed.y * Mathf.Clamp01(moveAcceleration.y);
        }
        else if (compare.y < maxMoveSpeed.y)
        {
            // Ditto for max vertical speed.
            force.y = inputtedMovement.y * moveAcceleration.y;
        }

        // Note: This is the "correct" way to change the velocity of a
        // rigidbody. Directly setting the velocity often leads to weird
        // results, such as the shotgun not being able to properly move the
        // character.
        Master.r2d.AddForce(force);

        // Handle jumping.
        jumpCooldown.IncrementFixedUpdate();
        if (inputtedJump && CanJump())
        {
            // Since a jump is only performed for one fixed update, it must be
            // an impulse.
            Master.r2d.AddForce(Vector2.up * jumpForce, ForceMode2D.Impulse);
        }
    }
    #endregion

    #region Helper Methods
    private bool CanJump()
    {
        return jumpCooldown.IsDone && TouchingGround;
    }
    #endregion
    #endregion
}