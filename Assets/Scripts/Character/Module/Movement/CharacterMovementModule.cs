using NaughtyAttributes;
using System.Collections;
using UnityEngine;

/// <summary>
/// Performs the movement of characters. Another script is required to actually
/// call the functions.
///
/// <br/>
///
/// Authors: Ryan Chang (2023)
/// </summary>
public class CharacterMovementModule : Module
{
    #region Enums
    public enum GroundedStatus
    {
        /// <summary>
        /// The character is grounded.
        /// </summary>
        Grounded,
        /// <summary>
        /// The character is not grounded and has issued the jump command right
        /// before becoming not grounded. This is set whenever a jump command
        /// succeeds and is replaced by <see cref="Grounded"/> once grounded.
        /// </summary>
        AirbornFromJump,
        /// <summary>
        /// The character is not grounded and has not issued any recent
        /// (successful) jump commands. The is set when the character is in the
        /// <see cref="Grounded"/> state and loses contact with the ground.
        /// </summary>
        AirbornFromFall
    }
    #endregion

    #region Variables
    #region User Settings
    [Header("Movement Settings")]
    [InfoBox("NOTE: maxMoveSpeed.y is NOT the max jump speed! Jumping is " +
        "controlled by jumpForce.")]
    [Tooltip("The maximum move speed for this character in both horizontal " +
        "and vertical directions.")]
    public Vector2 maxMoveSpeed = new(10f, 0);

    [InfoBox("NOTE: moveAcceleration.y is NOT the jump force! Jumping is " +
        "controlled by jumpForce.")]
    [Tooltip("The move acceleration for this character in both horizontal " +
        "and vertical directions.")]
    public Vector2 moveAcceleration = new(1f, 0);

    [Tooltip("The upward force produced by jumping.")]
    public float jumpForce = 12f;

    public Duration jumpCooldown = new(0.5f);

    [Tooltip("The collider responsible for checking if the character is " +
        "grounded.")]
    public Collider2D groundCheck;

    [Header("Animation Settings")]
    public Animator characterAnimator;

    [Tooltip("If true, then animParamMoveX and animParamMoveY will be " +
        "bounded to be positive.")]
    [SerializeField]
    private bool positiveAnimParamOnly;

    [Tooltip("Animator Parameter - Speed X.")]
    [AnimatorParam(nameof(characterAnimator), AnimatorControllerParameterType.Float)]
    [SerializeField]
    private string animParamSpeedX;

    [Tooltip("Animator Parameter - Speed Y.")]
    [AnimatorParam(nameof(characterAnimator), AnimatorControllerParameterType.Float)]
    [SerializeField]
    private string animParamSpeedY;

    [Tooltip("Animator Parameter - Jump")]
    [AnimatorParam(nameof(characterAnimator), AnimatorControllerParameterType.Bool)]
    [SerializeField]
    private string animParamJump;
    #endregion

    #region Autogenerated
    [Header("Inputs")]
    [Tooltip("The inputted movement of this character. The x component " +
        "controls the horizontal movement and the vertical component " +
        "controls the vertical movement. All components are clamped " +
        "between -1 and 1.")]
    [ReadOnly]
    public Vector2 inputtedMovement;

    [Tooltip("If true, the input to jump has been pressed.")]
    [ReadOnly]
    public bool inputtedJump;

    [Header("Grounded Checks")]
    [ReadOnly]
    [SerializeField]
    private Collider2D[] touchingGroundColliders = new Collider2D[1];

    [ReadOnly]
    [SerializeField]
    private ContactFilter2D groundCheckCF2D;

    [ReadOnly]
    public GroundedStatus groundedStatus;
    #endregion
    #endregion

    #region Parameters
    /// <summary>
    /// True if the character's <see cref="groundCheck"/> is touching at least
    /// one collider with a layer contained in the layermask <see
    /// cref="GameManager.canJumpLayers"/>.
    /// </summary>
    public bool TouchingGround => groundCheck.OverlapCollider(
        groundCheckCF2D, touchingGroundColliders
    ) > 0;
    #endregion

    #region Methods
    #region Instantiation
    private void Start()
    {
        // Make sure max speed is positive.
        maxMoveSpeed = maxMoveSpeed.Abs();

        // Set the contact filter for the grounded check.
        groundCheckCF2D = new()
        {
            layerMask = GameManager.Instance.canJumpLayers,
            useLayerMask = true
        };
    }
    #endregion

    #region Main Loop
    private void FixedUpdate()
    {
        // Here we move the character. First, toggle collisions with one-way
        // platforms if down is pressed.
        LayersManager.Instance.IgnoreCollisionsWithPlatforms(
            Master.c2d,
            !inputtedMovement.y.Approx(0) && inputtedMovement.y < 0
        );

        // Now to calculate movement. First get the speed the character is
        // moving at and compare it to the maximal speed.
        Vector2 speed = Master.r2d.velocity;

        // Used to make the comparison.
        Vector2 compare = new(
            inputtedMovement.x.Sign() * speed.x,
            inputtedMovement.y.Sign() * speed.y
        );

        Vector2 force = new();

        if (inputtedMovement.x.Approx(0) && !speed.x.Approx(0))
        {
            // Apply a backwards force to stop the player.
            force.x = -speed.x * Mathf.Clamp01(moveAcceleration.x);
        }
        else if (compare.x < maxMoveSpeed.x)
        {
            // The horizontal speed is less than the max horizontal speed. Allow
            // character to move.
            force.x = inputtedMovement.x * moveAcceleration.x;
        }
        if (inputtedMovement.y.Approx(0) && !speed.y.Approx(0))
        {
            // Ditto.
            force.y = -speed.y * Mathf.Clamp01(moveAcceleration.y);
        }
        else if (compare.y < maxMoveSpeed.y)
        {
            // Ditto for max vertical speed.
            force.y = inputtedMovement.y * moveAcceleration.y;
        }

        // Note: This is the "correct" way to change the velocity of a
        // rigidbody. Directly setting the velocity often leads to weird
        // results, such as the shotgun not being able to properly move the
        // character.
        Master.r2d.AddForce(force);

        // Walk animation.
        if (characterAnimator)
        {
            Vector2 paramVal = positiveAnimParamOnly ? speed.Abs() : speed;
            if (!string.IsNullOrWhiteSpace(animParamSpeedX))
            {
                characterAnimator.SetFloat(animParamSpeedX, paramVal.x);
            }

            if (!string.IsNullOrWhiteSpace(animParamSpeedY))
            {
                characterAnimator.SetFloat(animParamSpeedY, paramVal.y);
            }
        }

        // Handle jumping.
        jumpCooldown.IncrementFixedUpdate(false);

        if (inputtedJump && CanJump())
        {
            // Since a jump is only performed for one fixed update, it must be
            // an impulse.
            Master.r2d.AddForce(Vector2.up * jumpForce, ForceMode2D.Impulse);

            groundedStatus = GroundedStatus.AirbornFromJump;

            jumpCooldown.Reset();
        }
        else if (TouchingGround)
        {
            groundedStatus = GroundedStatus.Grounded;
        }
        else if (groundedStatus != GroundedStatus.AirbornFromJump)
        {
            groundedStatus = GroundedStatus.AirbornFromFall;
        }

        // Jump animation.
        if (!string.IsNullOrWhiteSpace(animParamJump) && characterAnimator)
        {
            characterAnimator.SetBool(animParamJump,
                groundedStatus == GroundedStatus.AirbornFromJump);
        }
    }

    public void Dodge()
    {
        //Can be done using durations
        //{
        //    //since this gets called when the player is dodging, canDodge is now false and isDodging is now true
        //    canDodge = false;
        //    isDodging = true;
        //    invulnerable = true;

        //    //enemy layer
        //    gameObject.layer = 10;
        //    StartCoroutine(UIScript.DashFill());
        //    //saves gravity value before we change it

        //    //makes it so the player does not fall during dodge
        //    rigid.gravityScale = 0f;
        //    //dodge in the direction the character is facing
        //    if (Input.GetKey(KeyCode.D))
        //    {
        //        rigid.velocity = new Vector2(dodgeForce, 0f);
        //    }
        //    else
        //    {
        //        rigid.velocity = new Vector2(-dodgeForce, 0f);
        //    }

        //    //there is no trail renderer attached right now, but if one is attached it will emit while dodging
        //    trail.emitting = true;

        //    yield return new WaitForSeconds(dodgeTime);
        //    //turns trail off when dodging stops
        //    trail.emitting = false;
        //    //sets gravity back to OG setting
        //    rigid.gravityScale = originalGravity;
        //    isDodging = false;
        //    invulnerable = false;
        //    //player layer
        //    gameObject.layer = 7;
        //    yield return new WaitForSeconds(dodgeCoolDown);
        //    canDodge = true;
        //}
    }

    #endregion

    #region Helper Methods
    private bool CanJump()
    {
        return jumpCooldown.IsDone && TouchingGround;
    }
    #endregion
    #endregion
}