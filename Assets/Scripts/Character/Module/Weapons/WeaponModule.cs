using UnityEngine;
using NaughtyAttributes;

/// <summary>
/// Represents a singular weapon. This can be used by both players and enemies.
/// 
/// <br/>
/// 
/// Authors: Ryan Chang, Zane O'Dell (2023)
/// </summary>
public class WeaponModule : Module
{
    #region Enums
    /// <summary>
    /// Describes the current input status of the weapon.
    /// </summary>
    public enum WeaponInputState
    {
        /// <summary>
        /// When no inputs are provided to the weapon.
        /// </summary>
        Idle,
        /// <summary>
        /// The first frame of firing.
        /// </summary>
        FiringStart,
        /// <summary>
        /// The later frames of firing. Used for auto-fire.
        /// </summary>
        FiringHeld,
        /// <summary>
        /// When the Reload input is provided to the weapon.
        /// </summary>
        Reloading,
        /// <summary>
        /// When the alt fire input is provided to the weapon
        /// </summary>
        Alting
    }
    #endregion

    #region Variables
    #region User Settings
    /// <inheritdoc cref="WeaponInputState"/>
    [Header("Global")]
    [Tooltip("Describes the current status of the weapon.")]
    [ReadOnly]
    [SerializeField]
    private WeaponInputState inputState;

    [Header("Animation")]
    [Tooltip("The animator for the weapon")]
    public Animator weaponAnimator;

    [Tooltip("The name of the animation parameter that controls firing.")]
    [AnimatorParam(nameof(weaponAnimator), AnimatorControllerParameterType.Bool)]
    public string animFiringBool;

    [Tooltip("The name of the animation parameter that controls reloading.")]
    [AnimatorParam(nameof(weaponAnimator), AnimatorControllerParameterType.Bool)]
    public string animReloadingBool;

    [Header("Firing Settings")]
    [Tooltip("The point where the projectiles originate from.")]
    public Transform firePoint;

    [Tooltip("If true, keep firing the weapon when the trigger is held down.")]
    public bool autofire = true;

    [Tooltip("How long to wait between rounds fired.")]
    public Duration firingDelay = new(1f);

    [Header("Ammo/Reloading Settings")]
    [Tooltip("The number of bullets/projectiles/etc per clip/mag/whatever.")]
    public int ammoCount = 10;

    [Tooltip("How much ammo is currently in the weapon?")]
    [ReadOnly]
    public int currentAmmo;

    [Tooltip("How long is the reload?")]
    public Duration reloadDelay = new(1f);

    [Tooltip("Bullet that this weapon uses")]
    public bulletScript bullet;
    #endregion

    #region Autogenerated
    /// <summary>
    /// Keeps track whether or not <see cref="InputState"/> has already been set
    /// this frame.
    /// </summary>
    private bool inputSetThisFrame;
    #endregion
    #endregion

    #region Init
    /// <summary>
    /// Initializes Ammo count
    /// </summary>
    protected void Start()
    {
        currentAmmo = ammoCount;
    }
    #endregion

    #region Parameters
    /// <summary>
    /// True if <see cref="currentAmmo"/> is zero.
    /// </summary>
    public bool OutOfAmmo => currentAmmo <= 0;
    #endregion

    #region Methods
    #region Main Loop
    private void Update()
    {
        inputSetThisFrame = false;

        // Always increment firing delay.
        firingDelay.IncrementUpdate(false);

        // Determine if reload has completed.
        if (inputState == WeaponInputState.Reloading)
        {
            if (reloadDelay.IncrementUpdate(true))
            {
                inputState = WeaponInputState.Idle;
                //reloadDelay.Reset();
            }
        }
    }
    #endregion

    #region Weapon Firing
    /// <summary>
    /// Attempts to fire the weapon.
    /// </summary>
    /// <returns>True if firing was successful, false otherwise.</returns>
    public bool TryFireWeapon()
    {
        
        bool canFire = CheckCanFire();

        if (canFire)
        {
            firingDelay.Reset();

            switch (inputState)
            {
                case WeaponInputState.FiringStart:
                    inputState = WeaponInputState.FiringHeld;
                    break;
                default:
                    inputState = WeaponInputState.FiringStart;
                    break;
            }

            // Actually fire now.
            SpawnProjectile();
            currentAmmo -= 1;
        }

        // Set animations.
        if (weaponAnimator && !string.IsNullOrWhiteSpace(animFiringBool))
        {
            weaponAnimator.SetBool(animFiringBool, canFire);
        }

        return canFire;
    }

    /// <summary>
    /// Checks if the weapon can fire.
    /// </summary>
    /// <returns>True if the weapon can fire, false otherwise.</returns>
    private bool CheckCanFire()
    {
        if (OutOfAmmo)
        {
            ReloadWeapon();
            return false;
        }
            

        switch (inputState)
        {
            case WeaponInputState.Idle:
                return firingDelay.IsDone;
            case WeaponInputState.FiringStart:
            case WeaponInputState.FiringHeld:
                // If autofire is disabled, then do not allow the weapon to
                // be fired.
                return firingDelay.IsDone && autofire;
            default:
                return false;
        }
    }

    /// <summary>
    /// Actually fires the weapon.
    /// </summary>
    private void SpawnProjectile()
    {
        //Spawned projectile, need to look into refactoring bullets themselves
        Instantiate(bullet, firePoint.position, Quaternion.identity);
    }

    /// <summary>
    /// Handles the alt fire for each of the weapons
    /// </summary>
    public virtual void AltFire()
    {
        Debug.Log("Doing alt fire");
    }
    
    #endregion

    #region Weapon Reloading
    /// <summary>
    /// Complete process of reloading
    /// </summary>
    public void ReloadWeapon()
    {
        inputState = WeaponInputState.Reloading;
        if (inputState == WeaponInputState.Reloading)
        {
            reloadDelay.Reset();
            RefillAmmo();



            // Set animations.
            if (weaponAnimator && !string.IsNullOrWhiteSpace(animReloadingBool))
            {
                //TODO Fix this, the animation does not play 
                weaponAnimator.SetBool(animReloadingBool, inputState == WeaponInputState.Reloading);
            }
        }

        
    }

    /// <summary>
    /// Refills the current weapon's current ammo count
    /// </summary>
    private void RefillAmmo()
    {
        currentAmmo = ammoCount;
    }
    #endregion
    #endregion
}