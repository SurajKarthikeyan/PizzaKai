using UnityEngine;
using NaughtyAttributes;
using System;

/// <summary>
/// Represents a singular weapon. This can be used by both players and enemies.
/// 
/// <br/>
/// 
/// Authors: Ryan Chang, Zane O'Dell (2023)
/// </summary>
public class WeaponModule : Module, IWeapon
{
    #region Enums
    /// <summary>
    /// Describes the current input status of the weapon.
    /// </summary>
    public enum WeaponInputState
    {
        /// <summary>
        /// When no inputs are provided to the weapon.
        /// </summary>
        Idle,
        /// <summary>
        /// The first frame of firing.
        /// </summary>
        FiringStart,
        /// <summary>
        /// The later frames of firing. Used for auto-fire.
        /// </summary>
        FiringHeld,
        /// <summary>
        /// When the Reload input is provided to the weapon.
        /// </summary>
        Reloading,
        /// <summary>
        /// When the alt fire input is provided to the weapon
        /// </summary>
        Alting
    }

    #endregion

    #region Variables
    #region User Settings
    /// <inheritdoc cref="WeaponInputState"/>
    [Header("Global")]
    [Tooltip("The name of the weapon.")]
    [SerializeField]
    private string weaponName;

    [Tooltip("Describes the current status of the weapon.")]
    [ReadOnly]
    [SerializeField]
    private WeaponInputState inputState;

    [Tooltip("Set to true to disallow reloading (as alts only have a cooldown).")]
    public bool isAlt;


    [Header("Animation")]
    [Tooltip("The animator for the weapon")]
    public Animator weaponAnimator;

    [Tooltip("The name of the animation parameter that controls firing.")]
    [AnimatorParam(nameof(weaponAnimator), AnimatorControllerParameterType.Bool)]
    public string animFiringBool;

    [Tooltip("The name of the animation parameter that controls reloading.")]
    [AnimatorParam(nameof(weaponAnimator), AnimatorControllerParameterType.Bool)]
    public string animReloadingBool;
    [Header("UI")]
    [Tooltip("The graphic to use for the ammo in the UI.")]
    public Sprite ammoGraphic;


    [Header("Firing Settings")]
    [Tooltip("The point where the projectiles originate from.")]
    public Transform firePoint;

    [Tooltip("If true, keep firing the weapon when the trigger is held down.")]
    public bool autofire = true;

    [Tooltip("How long to wait between rounds fired.")]
    public Duration firingDelay = new(1f);

    [Header("Ammo/Reloading Settings")]
    [Tooltip("The number of bullets/projectiles/etc per clip/mag/whatever.")]
    [HideIf(nameof(isAlt))]
    public int ammoCount = 10;

    [Tooltip("How much ammo is currently in the weapon?")]
    [HideIf(nameof(isAlt))]
    [ReadOnly]
    public int currentAmmo;

    [Tooltip("How long is the reload?")]
    [HideIf(nameof(isAlt))]
    public Duration reloadDelay = new(1f);

    [Tooltip("Updated bullet spawn this weapon uses.")]
    public WeaponSpawn bulletSpawn;
    #endregion

    #region Autogenerated
    private int burstCount;
    #endregion
    #endregion

    #region Init
    /// <summary>
    /// Initializes Ammo count
    /// </summary>
    protected virtual void Start()
    {
        currentAmmo = ammoCount;
    }
    #endregion

    #region Parameters
    /// <summary>
    /// True if <see cref="currentAmmo"/> is zero and if the input state is not reloading.
    /// </summary>
    public bool OutOfAmmo => currentAmmo <= 0 &&
        InputState != WeaponInputState.Reloading;

    public WeaponInputState InputState
    {
        get => inputState;
        set
        {
            inputState = value;

            if (weaponAnimator)
            {
                if (!string.IsNullOrEmpty(animReloadingBool))
                {
                    weaponAnimator.SetBool(
                        animReloadingBool,
                        InputState == WeaponInputState.Reloading
                    );
                }

                if (!string.IsNullOrEmpty(animFiringBool))
                {
                    weaponAnimator.SetBool(
                        animFiringBool,
                        InputState == WeaponInputState.FiringStart ||
                        InputState == WeaponInputState.FiringHeld
                    );
                }
            }
        }
    }

    /// <summary>
    /// How many shots were fired in this current burst?
    /// </summary>
    public int BurstCount => burstCount;

    public string WeaponName
    {
        get => weaponName;
        set => weaponName = value;
    }
    #endregion

    #region Methods
    #region Main Loop
    /// <summary>
    /// Update is called every frame
    /// </summary>
    private void Update()
    {
        // Always increment firing delay.
        firingDelay.IncrementUpdate(false);

        // Determine if reload has completed.
        if (InputState == WeaponInputState.Reloading)
        {
            if (reloadDelay.IncrementUpdate(true))
            {
                InputState = WeaponInputState.Idle;
            }
        }
    }
    #endregion

    #region Weapon Firing
    /// <summary>
    /// Attempts to fire the weapon.
    /// </summary>
    /// <returns>True if firing was successful, false otherwise.</returns>
    public bool TryFireWeapon()
    {
        bool canFire = CheckCanFire();

        if (canFire)
        {
            firingDelay.ResetIfDone();

            InputState = InputState switch
            {
                // If the player is already firing, then we go to the firing
                // start state, otherwise we start firing.
                WeaponInputState.FiringStart => WeaponInputState.FiringHeld,
                _ => WeaponInputState.FiringStart,
            };

            // Actually fire now.
            FireProjectile();

            if (isAlt)
            {
                currentAmmo = 1;
                ammoCount = 1;
            }
            else
                currentAmmo -= 1;
        }

        // Set animations.
        if (weaponAnimator && !string.IsNullOrWhiteSpace(animFiringBool))
        {
            weaponAnimator.SetBool(animFiringBool, canFire);
        }

        return canFire;
    }

    public void ResetBurst() => burstCount = 0;

    /// <summary>
    /// Checks if the weapon can fire.
    /// </summary>
    /// <returns>True if the weapon can fire, false otherwise.</returns>
    private bool CheckCanFire()
    {
        if (!isAlt && OutOfAmmo)
        {
            TryReloadWeapon();
            return false;
        }

        switch (InputState)
        {
            case WeaponInputState.Idle:
                return firingDelay.IsDone;
            case WeaponInputState.FiringStart:
            case WeaponInputState.FiringHeld:
                // If autofire is disabled, then do not allow the weapon to be
                // fired.
                return firingDelay.IsDone && autofire;
            default:
                return false;
        }
    }

    /// <summary>
    /// Actually fires the weapon.
    /// </summary>
    protected void FireProjectile()
    {
        // Spawns the projectile and then tells it to start moving.
        bulletSpawn.Spawn(this);
    }
    #endregion

    #region Weapon Reloading
    /// <summary>
    /// Complete process of reloading
    /// </summary>
    public bool TryReloadWeapon()
    {
        if (!isAlt)
        {
            InputState = WeaponInputState.Reloading;
        }

        return false;
    }
    #endregion

    #region Utility
    public void SetActive(bool active)
    {
        gameObject.SetActive(active);
    }
    #endregion
    #endregion
}