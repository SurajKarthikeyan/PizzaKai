using UnityEngine;
using NaughtyAttributes;

/// <summary>
/// Represents a singular weapon. This can be used by both players and enemies.
/// 
/// <br/>
/// 
/// Authors: Ryan Chang (2023)
/// </summary>
public class WeaponModule : Module
{
    #region Enums
    /// <summary>
    /// Describes the current input status of the weapon.
    /// </summary>
    public enum WeaponInputState
    {
        /// <summary>
        /// When no inputs are provided to the weapon.
        /// </summary>
        Idle,
        /// <summary>
        /// The first frame of firing.
        /// </summary>
        FiringStart,
        /// <summary>
        /// The later frames of firing. Used for auto-fire.
        /// </summary>
        FiringHeld,
        /// <summary>
        /// When the Reload input is provided to the weapon.
        /// </summary>
        Reloading
    }
    #endregion

    #region Variables
    #region User Settings
    /// <inheritdoc cref="WeaponInputState"/>
    [Header("Global")]
    [Tooltip("Describes the current status of the weapon.")]
    [ReadOnly]
    [SerializeField]
    private WeaponInputState inputState;

    [Header("Animation")]
    [Tooltip("The animator for the weapon")]
    public Animator weaponAnimator;

    [Tooltip("The name of the animation parameter that controls firing.")]
    [AnimatorParam(nameof(weaponAnimator), AnimatorControllerParameterType.Bool)]
    public string animFiringBool;

    [Tooltip("The name of the animation parameter that controls reloading.")]
    [AnimatorParam(nameof(weaponAnimator), AnimatorControllerParameterType.Bool)]
    public string animReloadingBool;

    [Header("Firing Settings")]
    [Tooltip("The point where the projectiles originate from.")]
    public Transform firePoint;

    [Tooltip("If true, keep firing the weapon when the trigger is held down.")]
    public bool autofire = true;

    [Tooltip("How long to wait between rounds fired.")]
    public Duration firingDelay = new(1f);

    [Header("Ammo/Reloading Settings")]
    [Tooltip("The number of bullets/projectiles/etc per clip/mag/whatever.")]
    public int ammoCount = 10;

    [Tooltip("How much ammo is currently in the weapon?")]
    [ReadOnly]
    public int currentAmmo;

    [Tooltip("How long is the reload?")]
    public Duration reloadDelay = new(1f);
    #endregion

    #region Autogenerated
    /// <summary>
    /// Keeps track whether or not <see cref="InputState"/> has already been set
    /// this frame.
    /// </summary>
    private bool inputSetThisFrame;
    #endregion
    #endregion

    #region Parameters
    /// <summary>
    /// True if <see cref="currentAmmo"/> is zero.
    /// </summary>
    public bool OutOfAmmo => currentAmmo <= 0;
    #endregion

    #region Methods
    #region Main Loop
    private void Update()
    {
        inputSetThisFrame = false;

        // Always increment firing delay.
        firingDelay.IncrementUpdate(false);

        // Determine if reload has completed.
        if (inputState == WeaponInputState.Reloading)
        {
            if (reloadDelay.IncrementUpdate(true))
            {

            }
        }
    }
    #endregion

    #region Weapon Firing
    /// <summary>
    /// Attempts to fire the weapon.
    /// </summary>
    /// <returns>True if firing was successful, false otherwise.</returns>
    public bool TryFireWeapon()
    {
        bool canFire = CheckCanFire();

        if (canFire)
        {
            firingDelay.Reset();

            switch (inputState)
            {
                case WeaponInputState.FiringStart:
                    inputState = WeaponInputState.FiringHeld;
                    break;
                default:
                    inputState = WeaponInputState.FiringStart;
                    break;
            }

            // Actually fire now.
            SpawnProjectile();
        }

        // Set animations.
        if (weaponAnimator && !string.IsNullOrWhiteSpace(animFiringBool))
        {
            weaponAnimator.SetBool(animFiringBool, canFire);
        }

        return canFire;
    }

    /// <summary>
    /// Checks if the weapon can fire.
    /// </summary>
    /// <returns>True if the weapon can fire, false otherwise.</returns>
    private bool CheckCanFire()
    {
        if (OutOfAmmo)
            return false;

        switch (inputState)
        {
            case WeaponInputState.FiringStart:
                return firingDelay.IsDone;
            case WeaponInputState.FiringHeld:
                // If autofire is disabled, then do not allow the weapon to
                // be fired.
                return firingDelay.IsDone && autofire;
            default:
                return false;
        }
    }

    /// <summary>
    /// Actually fires the weapon.
    /// </summary>
    private void SpawnProjectile()
    {


        // TODO: Spawn projectile.

    }
    #endregion

    #region Weapon Reloading

    #endregion
    #endregion
}